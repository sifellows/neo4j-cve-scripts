import os
import requests
import gzip
import argparse

class Downloader():
    # _base_url = 'https://nvd.nist.gov/feeds/json/cve/1.0/nvdcve-1.0-{}.json.gz'
    _base_url = 'https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-{}.json.gz'

    def __init__(self, year, extract_dir, download_dir='download'):
        self._year = year
        self._download_dir = download_dir
        self._extract_dir = extract_dir
        if not os.path.exists(self._download_dir):
            os.makedirs(self._download_dir)
        if not os.path.exists(self._extract_dir):
            os.makedirs(self._extract_dir)
        self._save_file = os.path.join(self._download_dir, '{}.gz'.format(self._year))
        self._extract_file = os.path.join(self._extract_dir, '{}.json'.format(self._year))

    def download(self):
        if os.path.exists(self._save_file):
            return
        print(self._base_url.format(self._year))
        resp = requests.get(self._base_url.format(self._year))
        if resp.status_code != 200:
            raise 'Not ok response'
        with open(self._save_file, 'wb') as gz:
            gz.write(resp.content)

    def extract(self):
        with gzip.open(self._save_file) as gz, \
            open(self._extract_file, 'wb') as out:
            out.write(gz.read())

    @staticmethod
    def download_and_extract(neo4j_dir, start_year, end_year):
        for year in range(start_year, end_year + 1):
            downloader = Downloader(year, os.path.join(neo4j_dir, 'import'))
            downloader.download()
            downloader.extract()

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--neo4j-dir')
    parser.add_argument('--start-year', default=2002)
    parser.add_argument('--end-year', default=2019)
    args = parser.parse_args()
    Downloader.download_and_extract(args.neo4j_dir, int(args.start_year), int(args.end_year))